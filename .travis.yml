# errata:
# - A travis bug causes caches to trample eachother when using the same
#   compiler key (which we don't use anyway). This is worked around for now by
#   replacing the "compilers" with a build name prefixed by the no-op ":"
#   command. See: https://github.com/travis-ci/travis-ci/issues/4393
# - sudo/dist/group are set so as to get Blue Box VMs, necessary for [loopback]
#   IPv6 support

sudo: required
os: linux
dist: xenial
language: cpp
compiler:
- gcc
env:
  global:
    - SDK_URL=https://bitcoincore.org/depends-sources/sdks

cache:
  apt: true
  directories:
  - depends/built
  - depends/sdk-sources
  - $HOME/google-cloud-sdk/
matrix:
  fast_finish: true
  include:
    - compiler: ": Linux"
      env: >
        HOST=x86_64-unknown-linux-gnu
        TARGET=x86_64-unknown-linux-musl
        BSCRIPT=build.sh
        TRAVIS_OS_NAME=linux
        PACKAGES="build-essential pkg-config libc6-dev m4 g++-multilib autoconf libtool ncurses-dev unzip python zlib1g-dev wget bsdmainutils automake libssl-dev libprotobuf-dev protobuf-compiler libqrencode-dev libdb++-dev software-properties-common libcurl4-openssl-dev curl" PPA="ppa:chris-lea/zeromq"

    #- compiler: ": Mac"
    #  os: osx
    #  osx_image: xcode9.2
    #  env: >
    #    HOST=x86_64-apple-darwin11
    #    TARGET=x86_64-apple-darwin
    #    BSCRIPT=build-mac.sh
    #    TRAVIS_OS_NAME=osx
    #    PACKAGES="binutils protobuf autogen"
    #    OSX_SDK=10.9

    - compiler: ": Windows"
      env: >
        HOST=x86_64-w64-mingw32
        TARGET=x86_64-pc-windows-gnu
        BSCRIPT=build-win.sh
        PACKAGES="build-essential pkg-config libcurl3-gnutls-dev libc6-dev libevent-dev m4 g++-multilib autoconf libtool ncurses-dev unzip git python zlib1g-dev wget bsdmainutils automake libssl-dev libprotobuf-dev protobuf-compiler libdb++-dev ntp ntpdate mingw-w64 wine bc"
        TRAVIS_OS_NAME=linux
        
before-install:
  - if [ ! -d "$HOME/google-cloud-sdk/bin" ]; then rm -rf $HOME/google-cloud-sdk; export CLOUDSDK_CORE_DISABLE_PROMPTS=1; curl https://sdk.cloud.google.com | bash; fi
  # Add gcloud to $PATH
  - export GCSFUSE_REPO=gcsfuse-`lsb_release -c -s`
  - source /home/travis/google-cloud-sdk/path.bash.inc
  - echo "deb http://packages.cloud.google.com/apt $GCSFUSE_REPO main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list
  - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
  - travis_retry sudo apt-get update
  - travis_retry sudo apt-get install gcsfuse

install:
  - if [ $TRAVIS_OS_NAME = linux ]; then sudo rm -f /etc/apt/sources.list.d/travis_ci_zeromq3-source.list; fi
  - if [ $TRAVIS_OS_NAME = linux ]; then travis_retry sudo apt-get -y update && sudo apt-get -y install -qq $PACKAGES; fi
  - if [ $BSCRIPT != build.sh ]; then curl -sSf https://build.travis-ci.org/files/rustup-init.sh | sh -s -- --default-toolchain stable -y && export PATH=$PATH:$HOME/.cargo/bin:$PATH; fi
  - if [ $BSCRIPT = build-win.sh ]; then rustup target add $TARGET; fi
  #- if [ $TRAVIS_OS_NAME = osx ]; then brew upgrade python coreutils automake; fi
  #- if [ $TRAVIS_OS_NAME = osx ]; then travis_retry brew tap discoteq/discoteq && brew install flock; fi
  #- if [ $TRAVIS_OS_NAME = osx ]; then rm '/usr/local/include/c++' && travis_retry brew tap homebrew/homebrew-core && brew install homebrew/homebrew-core/gcc@5 --overwrite gcc@5; fi
  #- if [ $TRAVIS_OS_NAME = osx ]; then travis_retry brew update && brew install $PACKAGES; fi

before_script:
    - unset CC; unset CXX
    - mkdir -p depends/SDKs depends/sdk-sources
    #- if [ -n "$OSX_SDK" -a ! -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi
    #- if [ -n "$OSX_SDK" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi

script:
    - gcsfuse version
    - gcloud version || true
    - gcsfuse version
    - ./zcutil/fetch-params.sh
    - ./zcutil/$BSCRIPT -j2
    - if [ $BSCRIPT = build-win.sh ]; then gzip -r ./src{komodo.exe,komodo-cli.exe, komodo-tx.exe} komodo_executables.zip; fi
    - if [ $BSCRIPT = build-win.sh ]; then gsutil cp ./komodo_executables.zip gs://veruscoin; fi

after_script:
-
- ls
- gcloud compute scp src.zip || echo "Upload failed"

notifications:
slack: $SLACK_ACCOUNT:$SLACK_TOKEN
